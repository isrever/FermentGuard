One-way functions: These functions either take input and produce an output or take input and perform an action (like writing to a file or logging a message) without expecting any data back from the function they call.

Data retrieval: Functions like loadTokens(), loadEmailConfig(), and readJSONFile() retrieve data, process it if necessary, and then return it. This is still a one-way operation because the data flows in a single direction—into the function and then back out to where it was called.

Data processing: Functions like handleIspindelPost() or serveData() take data, process it, and then produce an output or perform an action, such as sending an email or writing to a file.

There are no instances in the code where a function sends data to another function and then receives additional data back in a cyclical or continuous exchange, which would be characteristic of bi-directional data flow, hence all functions are one-way and listed as such

project-root/
│
├── server.js
│   └── createServer() 
│       └── .listen(port, serverAddress) 
│           └── requestHandler(req, res) [routes/routes.js]
│
├── routes/
│   └── routes.js
│       ├── requestHandler(req, res)
│       │   ├── handleIspindelPost(req, res) [controllers/ispindelController.js]
│       │   │   ├── loadTokens() [tokenController.js -> one-way: reads tokens -> returns matching token]
│       │   │   ├── loadEmailConfig() [emailController.js -> one-way: loads email config -> returns it]
│       │   │   ├── initializeEmailTransporter(config) [emailUtils.js -> one-way: initializes email transporter]
│       │   │   ├── sendEmailAlert(subject, message, config) [emailUtils.js -> one-way: sends email alert]
│       │   │   ├── loadLastSGValues() [internal function -> one-way: reads last SG values from file]
│       │   │   ├── saveLastSGValues(values) [internal function -> one-way: writes last SG values to file]
│       │   │   ├── writeDataToFile(filePath, data) [internal function -> one-way: appends data to specified file]
│       │   │   └── calculateSG(angle, formula) [internal function -> one-way: evaluates formula and returns SG]
│       │   ├── handleEmailConfig(req, res) [controllers/emailController.js]
│       │   │   ├── loadEmailConfig() [internal function -> one-way: loads email config -> returns it]
│       │   │   ├── saveEmailConfig(config) [internal function -> one-way: writes email config to file]
│       │   │   └── initializeEmailTransporter(config) [emailUtils.js -> one-way: initializes email transporter]
│       │   ├── servePage(res) [controllers/pageController.js]
│       │   │   └── read index.html [public/index.html -> serves the HTML content]
│       │   ├── serveData(res) [controllers/dataController.js]
│       │   │   ├── loadTokens() [tokenController.js -> one-way: reads tokens -> returns matching token]
│       │   │   └── readJSONFile(filePath) [fileUtils.js -> one-way: reads and returns JSON content from file]
│       │   ├── clearData(res) [controllers/dataController.js]
│       │   │   ├── loadTokens() [tokenController.js -> one-way: reads tokens -> returns matching token]
│       │   │   ├── writeJSONFile(filePath, data) [fileUtils.js -> one-way: writes JSON content to file]
│       │   │   ├── writeDataToFile(filePath, data) [internal function -> one-way: clears data in specified file]
│       │   │   └── clear log, data, last_sg [internal function -> one-way: clears specified data files]
│       │   ├── handleTokenManagement(req, res) [controllers/tokenController.js]
│       │   │   ├── loadTokens() [internal function -> one-way: reads tokens -> returns matching token]
│       │   │   ├── updateTokenFormula(name, formula) [internal function -> one-way: updates token formula]
│       │   └── createBackup(res) [controllers/backupController.js]
│       │   │   ├── loadTokens() [tokenController.js -> one-way: reads tokens -> returns matching token]
│       │   │   ├── readJSONFile(filePath) [fileUtils.js -> one-way: reads and returns JSON content from file]
│       │   │   └── writeJSONFile(filePath, data) [fileUtils.js -> one-way: writes JSON content to file]
│       │   └── restoreBackup(req, res) [controllers/backupController.js]
│       │       ├── createDirectoryIfNotExists(dir) [fileUtils.js -> one-way: creates directory if not exists]
│       │       ├── loadTokens() [tokenController.js -> one-way: reads tokens -> returns matching token]
│       │       ├── readJSONFile(filePath) [fileUtils.js -> one-way: reads and returns JSON content from file]
│       │       └── writeJSONFile(filePath, data) [fileUtils.js -> one-way: writes JSON content to file]
│
├── controllers/
│   ├── ispindelController.js
│   │   └── handleIspindelPost(req, res) [described above]
│   ├── emailController.js
│   │   └── handleEmailConfig(req, res) [described above]
│   ├── pageController.js
│   │   └── servePage(res) [described above]
│   ├── dataController.js
│   │   ├── serveData(res) [described above]
│   │   └── clearData(res) [described above]
│   ├── tokenController.js
│   │   ├── loadTokens() [internal function -> one-way: reads tokens -> returns matching token]
│   │   └── updateTokenFormula(name, formula) [internal function -> one-way: updates token formula]
│   ├── backupController.js
│   │   ├── createBackup(res) [described above]
│   │   └── restoreBackup(req, res) [described above]
│
│
├── utils/
│   ├── fileUtils.js
│   │   ├── createDirectoryIfNotExists(dir) [internal function -> one-way: creates directory if not exists]
│   │   ├── ensureFileExists(filePath) [internal function -> one-way: ensures file exists or creates it]
│   │   ├── readJSONFile(filePath) [internal function -> one-way: reads and returns JSON content from file]
│   │   └── writeJSONFile(filePath, data) [internal function -> one-way: writes JSON content to file]
│   ├── emailUtils.js
│   │   ├── initializeEmailTransporter(config) [internal function -> one-way: initializes email transporter]
│   │   └── sendEmailAlert(subject, message, config) [internal function -> one-way: sends email alert]
│   ├── logger.js
│   │   ├── logYellow(message) [internal function -> one-way: logs a yellow message]
│   │   └── logRedError(message) [internal function -> one-way: logs a red error message]
│
├── public/
   └── index.html [served by servePage(res) from pageController.js]
